---
## If true, the FSM transitions are managed by an external tool
Managed: false
# If true and the FSM is self-managed, transitions should be triggered
StepByStep: false
# Change idle behaviour, if true the state is kept until transition,
# otherwise the FSM holds the last state until transition
IdleKeepState: true
# Where to look for state libraries
StatesLibraries:
- "@MC_CONTROLLER_INSTALL_PREFIX@/fsm/states"
# Where to look for state files
StatesFiles:
- "@MC_CONTROLLER_INSTALL_PREFIX@/fsm/states/data"
# If true, state factory will be more verbose
VerboseStateFactory: false

# Additional robots to load
robots:
  ground:
    module: env
    params:
    - "@AROBASE@MC_ENV_DESCRIPTION@AROBASE@"
    - ground
# General constraints, always on
constraints:
-  type: contact
-  type: kinematics
   robotIndex: 0
   damper: [0.1, 0.01, 0.5]
# Collision constraint
collisions:
- type: collision
  r1Index: 0
  r2Index: 0
  useMinimal: true
# Initial set of contacts
contacts: {}
hrp2_drc:
  posture:
    stiffness: 1.0
    weight: 10.0
jvrc1:
  posture:
    stiffness: 1.0
    weight: 10.0
# Implement some additional text states
states:
  MinimalStabilizerState:
    base: MetaTasks
    tasks:
      StabilizerTask:
        type: lipm_stabilizer
        robotIndex: 0
        # start in enabled/disabled state
        enabled: true

  CustomConfigurationStabilizerState:
    base: MetaTasks

    # Add contacts to the solver.
    # Note that in order for the stabilizer to work, roll and pitch DoF need to be free to allow for admittance
    # control of the feet, and vertical DoF to allow for foot force-difference control.
    AddContacts:
    - r1: hrp2_drc
      r2: ground
      r1Surface: LeftFootCenter
      r2Surface: AllGround
      dof: [0, 0, 1, 1, 1, 0]
    - r1: hrp2_drc
      r2: ground
      r1Surface: RightFootCenter
      r2Surface: AllGround
      dof: [0, 0, 1, 1, 1, 0]

    tasks:
      StabilizerTask:
        type: lipm_stabilizer
        robotIndex: 0
        enabled: true

        ###########################
        ## Stabilizer configuration
        ###########################
        # Default values for these robot-specific parameters are set in the corresponding robot module.
        # You may choose to override any of them here, with due caution.
        hrp2_drc:
          leftFootSurface: LeftFootCenter
          rightFootSurface: RightFootCenter
          torsoBodyName: CHEST_LINK1
          # Configuration  of the QP tasks used by the stabilizer
          tasks:
            com:
              stiffness: [1000, 1000, 100]
              weight: 1000
              active_joints: [Root, RLEG_JOINT0, RLEG_JOINT1, RLEG_JOINT2, RLEG_JOINT3, RLEG_JOINT4, RLEG_JOINT5, LLEG_JOINT0, LLEG_JOINT1, LLEG_JOINT2, LLEG_JOINT3, LLEG_JOINT4, LLEG_JOINT5]
              height: 0.87
              max_height: 0.92
              min_height: 0.6
            contact:
              damping: 300
              stiffness: 1
              weight: 10000
            swing_foot:
              stiffness: 2000
              weight: 500

          # Weights for the force-distribution QP
          fdqp_weights:
            net_wrench: 10000
            ankle_torque: 100
            pressure: 1

          # Vertical drift frequency
          vdc:
            frequency: 1
            stiffness: 1000

          zmpcc:
            integrator_leak_rate: 0.1

          # Admittance coefficients (force-control)
          admittance:
            com: [0, 0]
            cop: [0.001, 0.001]
            dfz: 0.0001
            dfz_damping: 0

          ########################
          # Gains for DCM tracking
          ########################
          # These are the main gains of the stabilizer.
          dcm_tracking:
            gains:
              prop: 3
              integral: 20
              deriv: 0.5
            derivator_time_constant: 5
            integrator_time_constant: 30

          # Properties of the robot sole
          sole:
            half_length: 0.108
            half_width: 0.07
            friction: 0.7

        # Change some parameters for another robot
        jvrc1:
          dcm_tracking:
            gains:
              prop: 4
              integral: 10
              deriv: 0.5

  ####
  # States to handle the various support configuration of the stabilizer:
  # - DoubleSupport to move from left to right foot freely
  # - Left foot support to lift the right foot
  # - Right foot support to lift the left foot
  # Note that when swithing from double support to single support, it is the user'r responsibility to
  # ensure that a suitable tasks is added to the solver to control the free foot.
  ####
  StabilizerGoLeft:
    base: StabilizerStanding
    # left foot ratio
    # 0: on left foot
    # 1: on right foot
    target: 0
    contactState: DoubleSupport 

  StabilizerGoRight:
    base: StabilizerStanding
    target: 1
    contactState: DoubleSupport 

  StabilizerLeftSupport:
    base: StabilizerGoLeft
    contactState: Left

  StabilizerRightSupport:
    base: StabilizerGoRight
    contactState: Right

  ####
  # Tasks to handle the free foot
  # - Lift up phase: surface transform moving above the current position
  # - Put down phase: admittance tasks looking for a positive force above a threshold
  ####
  LiftRightSwingFoot:
    base: MetaTasks
    tasks:
      LiftFootTask:
        type: surfaceTransform
        stiffness: 10
        weight: 500
        robotIndex: 0
        surface: "RightFootCenter"
        moveWorld:
          translation: [0,0,0.1]

  LiftLeftSwingFoot:
    base: LiftRightSwingFoot
    tasks:
      LiftFootTask:
        surface: "LeftFootCenter"

  PutRightSwingFootDown:
    base: MetaTasks
    tasks:
      PutFootAdmittance:
        type: admittance
        robotIndex: 0
        surface: "RightFootCenter"
        admittance: [0,0,0,0,0,0.005]
        completion:
          AND:
            - eval: 0.03
            - wrench:
               force: [0, 0, 20] 
               couple: [0, 0, 0]
  
  PutLeftSwingFootDown:
    base: PutRightSwingFootDown
    tasks:
      PutFootAdmittance:
        surface: "LeftFootCenter"

  ####
  # The suitable stabilization mode are put in parallel to free foot motion tasks
  # to achieve stabilized motions
  ####
  
  # Lift and put down the right foot
  StabilizerLiftRightFoot:
    base: Parallel
    states: [LiftRightSwingFoot, StabilizerLeftSupport]  
  StabilizerPutRightFoot:
    base: Parallel
    states: [PutRightSwingFootDown, StabilizerLeftSupport]  

  # Lift and put down the left foot
  StabilizerLiftLeftFoot:
    base: Parallel
    states: [LiftLeftSwingFoot, StabilizerRightSupport]  
  StabilizerPutLeftFoot:
    base: Parallel
    states: [PutLeftSwingFootDown, StabilizerRightSupport]  
    
###
# Transitions map
# We rely here on the forced transitions to let the user choose what state to execute next
# from a predefined list of suitable states
#
# Note: Handle with caution, but by forcing the transitions early, notably while putting the foot down, this transition map may be used to test disturbances to the stabilizer (eg early contact, early lift-off, etc). Be cautious that if triggered too early, this may result in high impact on the feet.
###
transitions:
- [MinimalStabilizerState, Custom, CustomConfigurationStabilizerState]
- [MinimalStabilizerState, Standing, StabilizerStanding]
  # FSM to move to left foot and lift the right one
- [StabilizerStanding, Go Left, StabilizerGoLeft]
- [StabilizerGoLeft, Lift foot, StabilizerLiftRightFoot]
- [StabilizerLiftRightFoot, Put foot down, StabilizerPutRightFoot]
  # This automatic transition is important. You want to be reverting back to foot force difference control as soon as the
  # free foot establishes control with the ground.
- [StabilizerPutRightFoot, OK, StabilizerGoLeft]
- [StabilizerGoLeft, Center, StabilizerStanding]
  # FSM to move to the right foot and lift the left one
- [StabilizerStanding, Go Right, StabilizerGoRight]
- [StabilizerGoRight, Lift foot, StabilizerLiftLeftFoot]
- [StabilizerLiftLeftFoot, Put foot down, StabilizerPutLeftFoot]
- [StabilizerPutLeftFoot, OK, StabilizerGoRight]
- [StabilizerGoRight, Center, StabilizerStanding]
# Initial state
init: MinimalStabilizerState


# Specific configuration for each observer
Observers:
  Encoder:
    # Valid values are [estimator, control, none]
    UpdatePositionFrom: estimator
    UpdateVelocityFrom: estimator
  BodySensor:
    # Valid entries are [control, estimator, none]
    UpdateFrom: estimator
    FloatingBaseSensor: FloatingBase
RunObservers: [Encoder, KinematicInertial, CoMVelocity]
UpdateObservers: [Encoder, KinematicInertial]
